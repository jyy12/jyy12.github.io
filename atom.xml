<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jyy12.github.io/"/>
  <updated>2018-04-15T15:21:54.442Z</updated>
  <id>http://jyy12.github.io/</id>
  
  <author>
    <name>Jin&#39;s Blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue单面应用实践</title>
    <link href="http://jyy12.github.io/2018/03/15/vue%E5%8D%95%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jyy12.github.io/2018/03/15/vue单面应用实践/</id>
    <published>2018-03-15T14:09:19.000Z</published>
    <updated>2018-04-15T15:21:54.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、使用vue-cli初始化项目-vue-cli为vue的构建工具，默认配置里已结合webpack-vue-router-babel"><a href="#一、使用vue-cli初始化项目-vue-cli为vue的构建工具，默认配置里已结合webpack-vue-router-babel" class="headerlink" title="一、使用vue-cli初始化项目(vue-cli为vue的构建工具，默认配置里已结合webpack/vue-router/babel)"></a>一、使用vue-cli初始化项目(vue-cli为vue的构建工具，默认配置里已结合webpack/vue-router/babel)</h1><p><a href="https://vuejs-templates.github.io/webpack/" target="_blank" rel="noopener">https://vuejs-templates.github.io/webpack/</a><br>$ npm install -g vue-cli<br>$ vue init webpack my-project<br>$ cd my-project<br>$ npm install<br>$ npm run dev</p><p>查看vue-cli是否安装成功(V需大写)：vue -V    </p><p>如npm install失败可切换到淘宝镜像使用cnpm安装：<br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>cnpm i</p><p>运行项目：npm run dev</p><p>使用插件：vue+webpack+vue-router+axios+mockjs</p><h1 id="二、添加less"><a href="#二、添加less" class="headerlink" title="二、添加less"></a>二、添加less</h1><p>安装：npm install less less-loader –save-dev<br>使用<code>&lt;style lang=&quot;less&quot; scoped&gt;</code><br>引入less文件时行尾需加分号</p><h1 id="三、vue-router路由使用"><a href="#三、vue-router路由使用" class="headerlink" title="三、vue-router路由使用"></a>三、vue-router路由使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br></pre></td></tr></table></figure><p>路由传参：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/detail/"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'detail',params: &#123;id: item.id&#125;&#125;"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/detail/'+item.id"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在子组件中调用参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.id</span><br><span class="line">&#123;&#123;$route.params.id&#125;&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、axios的使用"><a href="#四、axios的使用" class="headerlink" title="四、axios的使用"></a>四、axios的使用</h1><p>安装npm install axios –save<br>import Vue from ‘vue’<br>import axios from ‘axios’<br>Vue.prototype.$axios = axios<br>使用：this.$axios.get(…).then(…).catch(…)</p><h1 id="五、模拟数据（mock-js）"><a href="#五、模拟数据（mock-js）" class="headerlink" title="五、模拟数据（mock.js）"></a>五、模拟数据（mock.js）</h1><p>1、安装：npm install mockjs –save-dev<br>2、建立模拟数据文件mockData.js(mock.js规则<a href="http://mockjs.com/examples.html)；" target="_blank" rel="noopener">http://mockjs.com/examples.html)；</a><br>3、在入口文件里配置开发环境引入mock数据，生产环境不引用，另添加开发环境下在控制台打印JSON数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mockData'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、正则模糊匹配url（适用带参数地址）<br>Mock.mock(new RegExp(AjaxApi.detail), DetailData)<br>5、模拟数据转为字符串并在控制台格式化输出<br>window.JSON.stringify(response.data,null,2)   // 在webpack中打包使用时需加window前缀</p><h1 id="六、图片"><a href="#六、图片" class="headerlink" title="六、图片"></a>六、图片</h1><p>.vue文件中通过img标签引用图片可直接使用相对路径<br>样式中使用图片，使用相对路径，在build/webpack.base.conf.js中配置，当图片小于10000kb时会使用base64</p><h1 id="七、Eslint配置"><a href="#七、Eslint配置" class="headerlink" title="七、Eslint配置"></a>七、Eslint配置</h1><p>关闭eslint：build/webpack.base.conf.js 配置文件中的eslint rules注释掉即可</p><p>.eslintrc.js配置自定义规则：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// allow paren-less arrow functions</span></span><br><span class="line"><span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="comment">// allow async-await</span></span><br><span class="line"><span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="comment">// allow debugger during development</span></span><br><span class="line"><span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">  <span class="comment">// 允许声明未使用变量</span></span><br><span class="line">  <span class="string">"vars"</span>: <span class="string">"local"</span>,</span><br><span class="line">  <span class="comment">// 参数不检查</span></span><br><span class="line">  <span class="string">"args"</span>: <span class="string">"none"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="comment">// 关闭语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">0</span>],</span><br><span class="line"><span class="comment">//空行最多不能超过100行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">0</span>, &#123;<span class="string">"max"</span>: <span class="number">100</span>&#125;],</span><br><span class="line"><span class="comment">//关闭禁止混用tab和空格</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">0</span>],</span><br><span class="line"><span class="comment">// 关闭行尾不能有空格</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">0</span>,</span><br></pre></td></tr></table></figure></p><h1 id="七、代码懒加载"><a href="#七、代码懒加载" class="headerlink" title="七、代码懒加载"></a>七、代码懒加载</h1><p>1、添加 syntax-dynamic-import 插件(<a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/syntax-dynamic-import/</a>)<br>2、.babelrc里配置<br>{“plugins”: [“syntax-dynamic-import”]}<br>3、页面引用<br>const detail = () =&gt; import(‘@/components/detail’)<br>或者多个<br>const detail = () =&gt; import(/<em> webpackChunkName: “detail” </em>/ ‘@/components/detail’)<br>const about = () =&gt; import(/<em> webpackChunkName: “detail” </em>/ ‘@/components/about’)</p><p>另外需在webpack.base.conf.js是配置生成的路径及文件名</p><h1 id="八、路由切换返回回到原滚动位置"><a href="#八、路由切换返回回到原滚动位置" class="headerlink" title="八、路由切换返回回到原滚动位置"></a>八、路由切换返回回到原滚动位置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果列表页数据是通过上拉加载，可通过vuex进行数据管理并在跳转时记录列表页滚动条位置，参考<a href="http://www.cnblogs.com/buerjj/p/8405443.html" target="_blank" rel="noopener">http://www.cnblogs.com/buerjj/p/8405443.html</a><br>实现方法：<br>1、通过vuex记录动态加载的列表数据indexItems，页面跳转时记录滚动条位置pageYOffset, 是否目标页面返回isFromDetail（在路由中beforeRouteEnter修改状态）<br>2、列表页重新加载时判断indexItems是否大于0及isFromDetail为true时，从indexItems读取数据，并跳转滚动条到指定位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、使用vue-cli初始化项目-vue-cli为vue的构建工具，默认配置里已结合webpack-vue-router-babel&quot;&gt;&lt;a href=&quot;#一、使用vue-cli初始化项目-vue-cli为vue的构建工具，默认配置里已结合webpack-vue-
      
    
    </summary>
    
    
      <category term="项目实践" scheme="http://jyy12.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>移动端限制文本框输入为整数或两位小数</title>
    <link href="http://jyy12.github.io/2018/01/29/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%99%90%E5%88%B6%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E4%B8%BA%E6%95%B4%E6%95%B0%E6%88%96%E4%B8%A4%E4%BD%8D%E5%B0%8F%E6%95%B0/"/>
    <id>http://jyy12.github.io/2018/01/29/移动端限制文本框输入为整数或两位小数/</id>
    <published>2018-01-29T13:35:13.000Z</published>
    <updated>2018-04-15T14:07:41.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、测试环境："><a href="#一、测试环境：" class="headerlink" title="一、测试环境："></a>一、测试环境：</h1><blockquote><p>华为荣耀6原生浏览器：chrome30<br>安卓QQ浏览器：chrome37<br>安卓微信：chrome57<br>安卓搜狗浏览器：chrome46<br>安卓UC：chrome57<br>iphone5s 10.3.2<br>ipad 9.3.2</p></blockquote><h1 id="二、type-”number”表现形式："><a href="#二、type-”number”表现形式：" class="headerlink" title="二、type=”number”表现形式："></a>二、type=”number”表现形式：</h1><blockquote><p>华为原生浏览器、QQ浏览器、iphone原生浏览器（iphone微信浏览器）: 获得焦点后调用全数字键盘，可输入数字、中文及任意符号，输入法可切换，可粘贴所有字符<br>android微信、安卓搜狗、安卓UC：调用数字键盘，只可输入0-9数字、小数点、加减号、e，粘贴时会对内容进行过滤只显示合法字符<br>ipad：调用全数字键盘，可输入任意字符</p></blockquote><h1 id="三、type-”number”和pattern-”-0-9-”一起使用时表现形式："><a href="#三、type-”number”和pattern-”-0-9-”一起使用时表现形式：" class="headerlink" title="三、type=”number”和pattern=”[0-9]*”一起使用时表现形式："></a>三、type=”number”和pattern=”[0-9]*”一起使用时表现形式：</h1><blockquote><p>安卓下效果与没有pattern时一致<br>iphone5s:调用九格宫数字键盘，不可切换输入法，只可输入0-9数字，可粘贴所有字符<br>ipad：调用全数字键盘，可输入任意字符</p></blockquote><h1 id="四、type-”text”和pattern-”-0-9-”一起使用时表现形式："><a href="#四、type-”text”和pattern-”-0-9-”一起使用时表现形式：" class="headerlink" title="四、type=”text”和pattern=”[0-9]*”一起使用时表现形式："></a>四、type=”text”和pattern=”[0-9]*”一起使用时表现形式：</h1><blockquote><p>安卓：调用全键盘，可输入任何字符，在表单触发submit事件时验证pattern规则<br>iphone5s：调用九格宫数字键盘，不可切换输入法，只可输入0-9数字，可粘贴所有字符<br>ipad：调用全数字键盘，可输入任意字符</p></blockquote><div class="remark"><strong> 注：</strong><br>1、IOS中，只有[0-9]*才可以调起九宫格数字键盘，\d 无效；<br>2、pattern属性适用于以下 <code>&lt;input&gt;</code> 类型：text, search, url, telepone, email 以及 password。所以number文本框的pattern属性的规则是无效的，它遵循的是number的规则，唯一的作用是可以在IOS下调起九宫格数字键盘。<br></div><h1 id="五、限制只能输入整数（与zepto同用）"><a href="#五、限制只能输入整数（与zepto同用）" class="headerlink" title="五、限制只能输入整数（与zepto同用）"></a>五、限制只能输入整数（与zepto同用）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">pattern</span>=<span class="string">"[0-9]*"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"set-input-int"</span>  <span class="attr">placeholder</span>=<span class="string">"number整数"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.fn.formatInt=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">verify</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//console.log(e.keyCode)</span></span><br><span class="line">        <span class="comment">//if(e.keyCode==69 || e.keyCode==189 || e.keyCode==187)return false;   // 安卓下number可输入除数字外还可输"+-e"，过滤"+-e",PC有效移动端无效</span></span><br><span class="line">        <span class="keyword">var</span> val=$(<span class="keyword">this</span>).val();</span><br><span class="line">        val=val.replace(<span class="regexp">/[^\d]/g</span>,<span class="string">''</span>);</span><br><span class="line">        val= <span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(val))?<span class="string">''</span>:<span class="built_in">parseInt</span>(val);</span><br><span class="line">        $(<span class="keyword">this</span>).val(<span class="string">''</span>).val(val)     <span class="comment">// 安卓下number里‘.’无法过滤掉，所以先清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    target.on(<span class="string">'keyup'</span>,verify)</span><br><span class="line">    target.on(<span class="string">'blur'</span>,verify)           </span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.set-input-int'</span>).formatInt();</span><br></pre></td></tr></table></figure><div class="remark"><strong> 备注：</strong><br>1、android type=”number”输入”+-e”会清空文本框内容，使用text不存在这个问题，但是text无法直接调用数字键盘<br>2、iphone5S和ipad下通过粘贴输入的非数字会清空<br>3、android chrome30/37，类似parseInt(‘343sds’)会返回NaN，所有返回NaN的做清空处理<br></div><h1 id="六、限制最多可输入两位小数（与zepto同用）"><a href="#六、限制最多可输入两位小数（与zepto同用）" class="headerlink" title="六、限制最多可输入两位小数（与zepto同用）"></a>六、限制最多可输入两位小数（与zepto同用）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"set-input-tofixed"</span> <span class="attr">placeholder</span>=<span class="string">"input两位小数"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"set-input-tofixed"</span> <span class="attr">placeholder</span>=<span class="string">"number两位小数"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.fn.formatToFixed=<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=<span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">verify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val=$(<span class="keyword">this</span>).val();</span><br><span class="line">        val=val.replace(<span class="regexp">/[^\d+\.]/g</span>,<span class="string">''</span>); </span><br><span class="line">        <span class="comment">// 只输入数字和点</span></span><br><span class="line">        <span class="keyword">if</span>(val!=<span class="string">''</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val.indexOf(<span class="string">'.'</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> arr=val.split(<span class="string">'.'</span>);</span><br><span class="line">                val=arr.length&gt;<span class="number">2</span>?<span class="built_in">parseFloat</span>(val):val;</span><br><span class="line">                val=arr[<span class="number">1</span>].length&gt;opt?<span class="built_in">parseFloat</span>(val).toFixed(opt):val;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                val=<span class="built_in">parseFloat</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="keyword">this</span>).val(val)</span><br><span class="line">    &#125;</span><br><span class="line">    target.on(<span class="string">'keyup'</span>,verify)</span><br><span class="line">    target.on(<span class="string">'blur'</span>,verify)</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.set-input-tofixed'</span>).formatToFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><div class="remark"> <strong> 备注：</strong><br>1、设置pattern=”[0-9]*”会导致IOS下不能输入小数点，text不能直接调起数字键盘，number可以调起全数字键盘，<br>2、安卓微信下number存在“+-e”导致的清空内容问题，chrome30/37、iphone5s、ipad下number验证异常时都会清空文本框内容（如输入字母或符号），使用text IOS和安卓不存在这个问题，但是用户体验不好。<br></div><p>　　关于input type=”number”的取值问题：在IOS及安卓下低版本的chrome（30/37）下可输入任意字符，当取的值为非合法数字时会返回空，安卓高版本的浏览器下只可输入“+-e.”及数字，当为非合法数字时取值也返回空。</p><p>另外下面方法在PC上有效，移动端无效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;number&quot; onkeypress=&quot;return (/[\d]/.test(String.fromCharCode(event.keyCode)))&quot; /&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、测试环境：&quot;&gt;&lt;a href=&quot;#一、测试环境：&quot; class=&quot;headerlink&quot; title=&quot;一、测试环境：&quot;&gt;&lt;/a&gt;一、测试环境：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;华为荣耀6原生浏览器：chrome30&lt;br&gt;安卓QQ浏览器：chrome
      
    
    </summary>
    
    
      <category term="移动端开发" scheme="http://jyy12.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>chrome background tab情况下setTimeout、setInterval渲染机制问题</title>
    <link href="http://jyy12.github.io/2016/05/08/chrome%20background%20tab%E6%83%85%E5%86%B5%E4%B8%8BsetTimeout%E3%80%81setInterval%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>http://jyy12.github.io/2016/05/08/chrome background tab情况下setTimeout、setInterval渲染机制/</id>
    <published>2016-05-08T13:33:44.000Z</published>
    <updated>2016-05-08T15:00:32.959Z</updated>
    
    <content type="html"><![CDATA[<p>　　chrome下，当把标签页切换到非活动状态下（background tab）,被切换的页面里执行的setTimeout/setInterval会发生混乱。在做倒计时时由于执行的频率较少，以为标签非活动状态下会停止setTimeout/setIntervaql的执行，测试证明chrome并没有停止计时器的执行，而只是针对执行时间小于1000ms的定时器减缓其执行频率，定时器间隔时间越小减缓强度越大。</p><blockquote><p>In early 2011, both Firefox and Chrome clamped the minimum wait time for setTimeout and setInterval to one second when running in a tab that is not the active tab for its window. <a href="https://blog.pivotal.io/pivotal-labs/labs/chrome-and-firefox-throttle-settimeout-setinterval-in-inactive-tabs" target="_blank" rel="noopener">查看原文</a></p></blockquote><p>以下为约一个小时的background tab页里setInterval的测试数据：<br><img src="/img/2016-5-8/test.png" alt="测试结果"></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;&lt;/title&gt; </span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">strong&#123;color:#FF0000;font-weight:bold;display:inline-block;width:60px;text-align:right;margin-right:5px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;1000ms:&lt;/strong&gt;&lt;span id=&quot;a&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;999ms:&lt;/strong&gt;&lt;span id=&quot;g&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;500ms:&lt;/strong&gt;&lt;span id=&quot;b&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;250ms:&lt;/strong&gt;&lt;span id=&quot;f&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;100ms:&lt;/strong&gt;&lt;span id=&quot;c&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;d&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;strong&gt;10ms:&lt;/strong&gt;&lt;span id=&quot;e&quot;&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var now=new Date();</span><br><span class="line">var aa=bb=cc=dd=ee=ff=gg=0;</span><br><span class="line">function a()&#123;</span><br><span class="line">    $(&apos;#a&apos;).text(aa+=1000)</span><br><span class="line">&#125;</span><br><span class="line">function b()&#123;</span><br><span class="line">    $(&apos;#b&apos;).text(bb+=500)</span><br><span class="line">&#125;</span><br><span class="line">function f()&#123;</span><br><span class="line">    $(&apos;#f&apos;).text(ff+=250)</span><br><span class="line">&#125;</span><br><span class="line">function c()&#123;</span><br><span class="line">    $(&apos;#c&apos;).text(cc+=100)</span><br><span class="line">&#125;</span><br><span class="line">function d()&#123;</span><br><span class="line">    $(&apos;#d&apos;).text(dd+=50)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function e()&#123;</span><br><span class="line">    $(&apos;#e&apos;).text(ee+=10)</span><br><span class="line">&#125;</span><br><span class="line">function g()&#123;</span><br><span class="line">    $(&apos;#g&apos;).text(gg+=999);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">setInterval(a,1000);</span><br><span class="line">setInterval(c,100);</span><br><span class="line">setInterval(e,10);</span><br><span class="line">setInterval(f,250);</span><br><span class="line">setInterval(b,500);</span><br><span class="line">setInterval(g,999);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://blog.pivotal.io/pivotal-labs/labs/chrome-and-firefox-throttle-settimeout-setinterval-in-inactive-tabs" target="_blank" rel="noopener">chrome-and-firefox-throttle-settimeout-setinterval-in-inactive-tabs</a><br><a href="https://developer.chrome.com/extensions/event_pages#transition" target="_blank" rel="noopener">https://developer.chrome.com/extensions/event_pages#transition</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　chrome下，当把标签页切换到非活动状态下（background tab）,被切换的页面里执行的setTimeout/setInterval会发生混乱。在做倒计时时由于执行的频率较少，以为标签非活动状态下会停止setTimeout/setIntervaql的执行，测试
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://jyy12.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端返回上一页实现方法</title>
    <link href="http://jyy12.github.io/2016/03/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://jyy12.github.io/2016/03/26/移动端返回上一页实现方法/</id>
    <published>2016-03-26T06:33:44.000Z</published>
    <updated>2016-04-23T09:02:04.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述:"></a>一、问题描述:</h1><p>　　使用window.history.go(-1)或者window.history.back(-1)实现移动端返回上一页功能，原生safair浏览器里存在问题（通过flex布局的上一张页面滚动无效，只能显示点击前停留的那屏，无法通过触摸滚动页面）。存在于ios 9.3(13E233)和ios9.3.1(13E238)系统,ios9.3其它版本未发现该问题，ios安装的其它浏览器不存在该问题，android也没有该问题。</p><h1 id="二、解决方案："><a href="#二、解决方案：" class="headerlink" title="二、解决方案："></a>二、解决方案：</h1><p>　　ios原生浏览器（ios其它浏览器不存在这种情况）下通过document.referrer实现返回上一页，部分手机的QQ内嵌浏览器使用document.referrer不能正常返回上一页，android下通过referrer属性实现时，当刷新页面后返回前一页失效，所以判断移动端浏览器类型针对原生safair进行处理，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; id=&quot;goBack&quot; &gt;返回&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">var u = navigator.userAgent;</span><br><span class="line">var goBack=document.getElementById(&quot;goBack&quot;);</span><br><span class="line">//针对ios原生浏览器处理</span><br><span class="line">if(!!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/) &amp;&amp; /(Safari)/i.test(u))&#123;</span><br><span class="line">    goBack.setAttribute(&quot;onclick&quot;,&quot;javascript:window.location=document.referrer;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述:&quot;&gt;&lt;/a&gt;一、问题描述:&lt;/h1&gt;&lt;p&gt;　　使用window.history.go(-1)或者window.history.back(-1)实现
      
    
    </summary>
    
    
      <category term="移动端开发" scheme="http://jyy12.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>chrome取消浏览器自动播放flash广告</title>
    <link href="http://jyy12.github.io/2016/02/24/chrome%E5%8F%96%E6%B6%88%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BEflash%E5%B9%BF%E5%91%8A/"/>
    <id>http://jyy12.github.io/2016/02/24/chrome取消浏览器自动播放flash广告/</id>
    <published>2016-02-24T06:33:44.000Z</published>
    <updated>2016-04-23T09:24:51.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述:"></a>一、问题描述:</h1><p>　　chrome 45及以上版本默认不自动播放flash，对于非自动播放的广告，chrome会在flash上悬浮一个播放按钮，点击后可播放。flash广告多使用覆盖a链接来实现，这种方法下无法点中chrome贴心提供的播放按钮。</p><p><strong> 不自动播放的flash需满足以下两点： </strong></p><ol><li>跨域</li><li>尺寸小于398*298（未知此尺寸chrome是怎么得出的）</li></ol><blockquote><p><strong> acelan86文中解决思路（<a href="https://github.com/acelan86/whatthefuck/wiki/chrome-45%E4%BB%A5%E4%B8%8A%E4%B8%8D%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%22%E9%9D%9E%E5%BF%85%E8%A6%81%22flash%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" target="_blank" rel="noopener">文章链接</a>）： </strong><br>在flash渲染的时候暂时把尺寸设置成大于398*298，在实际展现的时候在设置回来。<br>这里的尺寸有几个注意点： </p><ol><li>不只是flash自己的尺寸而是真正展现的尺寸，有可能flash设置了足够大，但是它外面包含的容器overflow了，导致flash实际尺寸没有这么大，这样也是无法自动播放的 </li><li>经过尝试，opacity:0 的flash只要尺寸足够大，也是可以自动播放的</li></ol></blockquote><p>另外发现当flash能过定位设置在布局之外，再定时显示也可解决flash自动播放的问题。</p><h1 id="二、解决方案："><a href="#二、解决方案：" class="headerlink" title="二、解决方案："></a>二、解决方案：</h1><p>1、同域下flash不受限制<br>2、设置大于398*298的尺寸，在渲染完成后改回小尺寸(渲染时间不可控，渲染影响因素不明)，参考acelan86上文中方法<br>3、通过定位设置一个很大的left值（使flash不可见，一定时间后改回正常值，时间不可控）</p><p>其中2、3方法的具体写法：<br>（1）JS通过setTimeout设置<br>（2）针对webkit利用css animation设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (-webkit-min-device-pixel-ratio:0)&#123;</span><br><span class="line">    .fixedFlashAutoStart&#123;</span><br><span class="line">        position:relative;</span><br><span class="line">        left:99999px;</span><br><span class="line">        -webkit-animation:fixedFlashAutoPlay 1ms linear 500ms 1 forwards;</span><br><span class="line">    &#125;</span><br><span class="line">    @-webkit-keyframes fixedFlashAutoPlay&#123;</span><br><span class="line">        from &#123;left:99999px;&#125;</span><br><span class="line">        to &#123;left:0;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、存在的问题："><a href="#三、存在的问题：" class="headerlink" title="三、存在的问题："></a>三、存在的问题：</h1><p>2、3定时重绘的方法非百分百有效，因所设置时间因素不可控（非flash下载时间，不确定是否是flash渲染时间）。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://github.com/acelan86/whatthefuck/wiki/chrome-45%E4%BB%A5%E4%B8%8A%E4%B8%8D%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%22%E9%9D%9E%E5%BF%85%E8%A6%81%22flash%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">chrome-45以上不自动播放”非必要”flash的一种可能解决方案</a><br><a href="https://news.ycombinator.com/item?id=10133771" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=10133771</a><br><a href="https://code.google.com/p/chromium/codesearch#chromium/src/content/renderer/pepper/plugin_power_saver_helper.cc&amp;sq=package:chromium&amp;type=cs&amp;l=87" target="_blank" rel="noopener">chromium source code see constants</a><br><a href="https://code.google.com/p/chromium/codesearch#chromium/src/content/renderer/pepper/plugin_instance_throttler_impl.cc&amp;q=plugin_instance_throttler_impl&amp;sq=package:chromium&amp;type=cs&amp;l=5" target="_blank" rel="noopener">chromium source code See ShouldThrottleConten</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述:&quot;&gt;&lt;/a&gt;一、问题描述:&lt;/h1&gt;&lt;p&gt;　　chrome 45及以上版本默认不自动播放flash，对于非自动播放的广告，chrome会在flas
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://jyy12.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
